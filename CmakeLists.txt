cmake_minimum_required(VERSION 3.26)

project(game_engine)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(PLATFORM "x64")
else()
    set(PLATFORM "x86")
endif()

if(CMAKE_GENERATOR MATCHES "Visual Studio")
    set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT game_engine)
endif()

set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/build)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_SYSTEM_NAME}/${PLATFORM}/${CMAKE_BUILD_TYPE}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_SYSTEM_NAME}/${PLATFORM}/${CMAKE_BUILD_TYPE}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_SYSTEM_NAME}/${PLATFORM}/${CMAKE_BUILD_TYPE}/lib)

set(CMAKE_CURRENT_BINARY_DIR ${CMAKE_BINARY_DIR}/${CMAKE_SYSTEM_NAME}/${PLATFORM}/${CMAKE_BUILD_TYPE}/game_engine.dir)

include(FetchContent)
set(FETCHCONTENT_BASE_DIR ${CMAKE_SOURCE_DIR}/third_party)

option(BUILD_SDL "Build the SDL library" ON)
option(BUILD_GLFW "Build the GLFW library" OFF)
option(BUILD_SPDLOG "Build the SPDLOG library" ON)
option(BUILD_BULLET "Build the Bullet library" OFF)
option(BUILD_IMGUI "Build the ImGui library" OFF)
option(BUILD_ASSIMP "Build the Assimp library" OFF)
option(BUILD_STB "Build the STB library" OFF)
option(BUILD_BOOST "Build the Boost library" OFF)
option(BUILD_GLEW "Build the GLEW library" ON)
option(BUILD_EIGEN "Include the Eigen library" OFF)
option(BUILD_MATH_LIBRARY "Build the Math Library" ON)


if(BUILD_SDL)
    message(STATUS "Fetching SDL...")
    FetchContent_Declare(
        sdl
        GIT_REPOSITORY https://github.com/libsdl-org/SDL.git
        GIT_TAG release-2.28.5
    )
endif()

if(BUILD_GLFW)
    message(STATUS "Fetching GLFW...")
    FetchContent_Declare(
        glfw
        GIT_REPOSITORY https://github.com/glfw/glfw.git
        GIT_TAG 3.3.4
    )
    set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
    set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
    set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
endif()


if(BUILD_SPDLOG)
message(STATUS "Fetching SPDLOG...")
    FetchContent_Declare(
        spdlog
        GIT_REPOSITORY https://github.com/gabime/spdlog.git
        GIT_TAG v1.9.2
    )

endif()

if(BUILD_BULLET)
message(STATUS "Fetching BULLET-3...")
    FetchContent_Declare(
        bullet
        GIT_REPOSITORY https://github.com/bulletphysics/bullet3.git
        GIT_TAG 3.09
    )

endif()

if(BUILD_IMGUI)
message(STATUS "Fetching IMGUI...")
    FetchContent_Declare(
        imgui
        GIT_REPOSITORY https://github.com/ocornut/imgui.git
        GIT_TAG v1.82
    )
endif()

if(BUILD_ASSIMP)
message(STATUS "Fetching ASSIMP...")
    FetchContent_Declare(
        assimp
        GIT_REPOSITORY https://github.com/assimp/assimp.git
        GIT_TAG v5.0.1
    )
endif()

if(BUILD_STB)
message(STATUS "Fetching STB...")
    FetchContent_Declare(
        stb
        GIT_REPOSITORY https://github.com/nothings/stb.git
        GIT_TAG master
    )
endif()

if(BUILD_BOOST)
message(STATUS "Fetching BOOST...")
    FetchContent_Declare(
        boost
        GIT_REPOSITORY https://github.com/boostorg/boost.git
        GIT_TAG boost-1.77.0
    )
    FetchContent_GetProperties(boost)
    if(NOT boost_POPULATED)
        FetchContent_Populate(boost)
        target_include_directories(game_engine SYSTEM PRIVATE ${boost_SOURCE_DIR})
    endif()
endif()


if(BUILD_GLEW)
    message(STATUS "Fetching GLEW...")
    FetchContent_Declare(
      glew
      GIT_REPOSITORY https://github.com/Perlmint/glew-cmake.git
      GIT_TAG master
      CMAKE_ARGS -Dglew-cmake_BUILD_STATIC=ON
    )
    FetchContent_GetProperties(glew)
    if(NOT glew_POPULATED)
        FetchContent_Populate(glew)
        add_subdirectory(${glew_SOURCE_DIR} ${glew_BINARY_DIR})
    endif()
endif()

if(BUILD_EIGEN)
    message(STATUS "Fetching Eigen...")
    FetchContent_Declare(
        eigen
        GIT_REPOSITORY https://gitlab.com/libeigen/eigen.git
        GIT_TAG 3.4.0
    )
    FetchContent_GetProperties(eigen)
    if(NOT eigen_POPULATED)
        FetchContent_Populate(eigen)
        include_directories(${eigen_SOURCE_DIR})
    endif()
endif()

if(BUILD_MATH_LIBRARY)
    message(STATUS "Fetching Math Library...")
    FetchContent_Declare(
        math_library
        GIT_REPOSITORY https://github.com/vadymchan/math_library.git
        GIT_TAG main
        # GIT_TAG v.0.0.2-beta
    )
endif()

file(GLOB_RECURSE SOURCES "src/*.cpp")
file(GLOB_RECURSE INTERNAL_HEADERS "src/*.h")
file(GLOB_RECURSE HEADERS "include/*.h")

option(GAME_ENGINE_USE_WINDOWS_SUBSYSTEM "Build as a Windows GUI application (if platform is Windows)" OFF)

if(WIN32 AND GAME_ENGINE_USE_WINDOWS_SUBSYSTEM)
    add_executable(game_engine WIN32 ${SOURCES} ${INTERNAL_HEADERS} ${HEADERS} main.cpp)
    target_compile_definitions(game_engine PUBLIC GAME_ENGINE_WINDOWS_SUBSYSTEM)
else()
    add_executable(game_engine ${SOURCES} ${INTERNAL_HEADERS} ${HEADERS} main.cpp)
endif()

if(CMAKE_GENERATOR MATCHES "Visual Studio")
    set_target_properties(game_engine PROPERTIES VS_GLOBAL_EnableClangTidyCodeAnalysis true)
endif()

target_include_directories(game_engine PUBLIC  include)
target_include_directories(game_engine PRIVATE src/internal_include)

if(BUILD_SDL)
    FetchContent_MakeAvailable(sdl)
    
    set(SDL_BUILD_INCLUDE_DIR ${sdl_BINARY_DIR}/include)

    if(EXISTS "${SDL_BUILD_INCLUDE_DIR}/SDL3")
        set(SDL_VERSION_DIR "SDL3")
    elseif(EXISTS "${SDL_BUILD_INCLUDE_DIR}/SDL2")
        set(SDL_VERSION_DIR "SDL2")
    else()
        message(FATAL_ERROR "Wrong directory in ${SDL_BUILD_INCLUDE_DIR}")
    endif()

    # SDL's include directories are in the build directory (not the source directory   
    # like other third parties in this project), due to SDL generating includes during build.

    target_include_directories(game_engine SYSTEM PRIVATE ${SDL_BUILD_INCLUDE_DIR})
    target_include_directories(game_engine SYSTEM PRIVATE ${SDL_BUILD_INCLUDE_DIR}/${SDL_VERSION_DIR})
    target_include_directories(game_engine SYSTEM PRIVATE
        $<$<CONFIG:Debug>:${sdl_BINARY_DIR}/include-config-debug/${SDL_VERSION_DIR}>
        $<$<CONFIG:Release>:${sdl_BINARY_DIR}/include-config-release/${SDL_VERSION_DIR}>
    )

    target_link_libraries(game_engine SDL2)
endif()

if(BUILD_GLFW)
    FetchContent_MakeAvailable(glfw)
    target_include_directories(game_engine SYSTEM PRIVATE ${glfw_SOURCE_DIR}/include)
    target_link_libraries(game_engine glfw)
endif()

if(BUILD_SPDLOG)
    FetchContent_MakeAvailable(spdlog)
    target_include_directories(game_engine SYSTEM PRIVATE ${spdlog_SOURCE_DIR}/include)
    target_link_libraries(game_engine spdlog)
endif()

if(BUILD_BULLET)
    FetchContent_MakeAvailable(bullet)
    target_link_libraries(game_engine BulletDynamics BulletCollision LinearMath)
endif()

if(BUILD_IMGUI)
    FetchContent_MakeAvailable(imgui)
    target_link_libraries(game_engine imgui)
endif()

if(BUILD_ASSIMP)
    FetchContent_MakeAvailable(assimp)
    target_link_libraries(game_engine assimp)
endif()

if(BUILD_STB)
    FetchContent_MakeAvailable(stb)
    target_link_libraries(game_engine stb)
endif()

if(BUILD_GLEW)
    target_include_directories(game_engine SYSTEM PRIVATE ${glew_SOURCE_DIR}/include)
    target_link_libraries(game_engine libglew_static)
endif()

if(BUILD_EIGEN)
    FetchContent_MakeAvailable(eigen)
    target_include_directories(game_engine SYSTEM PRIVATE ${eigen_SOURCE_DIR})
endif()

if(BUILD_MATH_LIBRARY)
    FetchContent_MakeAvailable(math_library)
    # if error with simd_define not generated occurs, uncomment this code
    # add_dependencies(game_engine math_library)
    target_include_directories(game_engine SYSTEM PRIVATE ${math_library_SOURCE_DIR}/include)
    target_link_libraries(game_engine math_library)
endif()



option(USE_VULKAN "Use Vulkan for graphics" ON)
option(USE_OPENGL "Use OpenGL for graphics" OFF)
option(USE_DIRECTX "Use DirectX for graphics" OFF)

if(USE_VULKAN)
    find_package(Vulkan REQUIRED)
    target_compile_definitions(game_engine PRIVATE VULKAN)
    target_include_directories(game_engine SYSTEM PRIVATE ${Vulkan_INCLUDE_DIRS})
    target_link_libraries(game_engine ${Vulkan_LIBRARIES})
endif()

if(USE_OPENGL)
    find_package(OpenGL QUIET COMPONENTS OpenGL EGL)
if(NOT OpenGL_FOUND)
    set(OpenGL_GL_PREFERENCE LEGACY)
    find_package(OpenGL REQUIRED)
endif()
    target_compile_definitions(game_engine PRIVATE OPENGL)
    target_include_directories(game_engine SYSTEM PRIVATE ${OPENGL_INCLUDE_DIR})
    target_link_libraries(game_engine ${OPENGL_gl_LIBRARY})
endif()

if(NOT USE_VULKAN AND NOT USE_OPENG AND NOT USE_DIRECTXs)
    message(FATAL_ERROR "At least one of Vulkan, OpenGL or DirectX must be selected for graphics API")
endif()

if(USE_DIRECTX AND NOT WIN32)
    message(FATAL_ERROR "DirectX is only available on Windows!")
endif()

add_custom_command(TARGET game_engine
                   POST_BUILD
                   COMMAND ${CMAKE_COMMAND} -E remove 
                           "${CMAKE_SOURCE_DIR}/test_fs_support_case_sensitivity"
                           "${CMAKE_SOURCE_DIR}/test_fs_support_CASE_sensitivity"
                   COMMENT "Removing case sensitivity test files from " ${CMAKE_SOURCE_DIR}
)

# TODO: add documentation with listing all variables, functions that can be used externally

cmake_minimum_required(VERSION 3.26)

set(WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}" CACHE PATH "Working directory for the build process")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}" CACHE PATH "Directory for runtime output files")
set(HLSL_SHADER_MODEL "6.7" CACHE STRING "HLSL shader model version")

# Choose which third-party libraries to include in the build
option(BUILD_SDL          "Build the SDL library"       ON)
option(BUILD_GLFW         "Build the GLFW library"      OFF)
option(BUILD_SPDLOG       "Build the SPDLOG library"    ON)
option(BUILD_BULLET       "Build the Bullet library"    OFF)
option(BUILD_IMGUI        "Build the ImGui library"     ON)
option(BUILD_ASSIMP       "Build the Assimp library"    OFF)
option(BUILD_STB          "Build the STB library"       ON)
option(BUILD_BOOST        "Build the Boost library"     OFF)
option(BUILD_EIGEN        "Build the Eigen library"     OFF)
option(BUILD_MATH_LIBRARY "Build the Math Library"      ON)
option(BUILD_EASTL        "Build the EASTL library"     ON)
option(BUILD_XXHASH       "Build the xxHash library"    ON)
option(BUILD_RAPIDJSON    "Build the RapidJSON library" ON)
option(BUILD_WATCHER      "Build the watcher library"   ON)
option(BUILD_ENTT         "Build the EnTT library"      ON)

# Choose which rendering API to use
option(USE_VULKAN  "Use Vulkan as the rendering API"                 ON)
option(USE_OPENGL  "Use OpenGL as the rendering API (DEPRECATED!)"  OFF)
option(USE_DIRECTX "Use DirectX as the rendering API"          ${WIN32})
option(FORCE_RHI_API "Force specific RHI API at compile time (disables runtime selection)" OFF)

option(USE_PROFILING "Enable profiling support (CPU + GPU)" OFF)

# Choose tools
option(BUILD_ASSET_TOOLS "Build offline asset conversion tools (gltfpack & toktx)" OFF)

include(CMakeDependentOption)

cmake_dependent_option(BUILD_VULKAN_MEMORY_ALLOCATOR "Build Vulkan Memory Allocator" ON "USE_VULKAN"  OFF)
cmake_dependent_option(BUILD_D3D12_MEMORY_ALLOCATOR  "Build D3D12 Memory Allocator"  ON "USE_DIRECTX" OFF)
cmake_dependent_option(USE_DIRECTX_AGILITY           "Fetch DirectX 12 Agility SDK (and DirectX-Headers as dependent library)"  ON "USE_DIRECTX" OFF)
cmake_dependent_option(USE_DIRECTX_TOOL_KIT          "Fetch DirectX Tool Kit for DX12" ON "USE_DIRECTX" OFF)
cmake_dependent_option(BUILD_WINPIX_EVENT "Fetch WinPix Event Runtime (PIX3) for PIX markers" ON "USE_DIRECTX" OFF)

cmake_dependent_option(BUILD_IMGUIZMO                "Build the ImGuizmo library" ON "BUILD_IMGUI" OFF)
cmake_dependent_option(BUILD_IMGUIFILEDIALOG  "Build the ImGuiFileDialog library" ON "BUILD_IMGUI" OFF)

cmake_dependent_option(BUILD_TRACY                         "Build Tracy profiler" ON  "USE_PROFILING"                 OFF)
cmake_dependent_option(USE_CPU_PROFILING  "Enable CPU profiling (requires Tracy)" ON  "USE_PROFILING;BUILD_TRACY"     OFF)
cmake_dependent_option(USE_GPU_PROFILING                   "Enable GPU profiling" ON  "USE_PROFILING"                 OFF)
cmake_dependent_option(USE_TRACY_GPU_PROFILING       "Enable Tracy GPU profiling" ON  "USE_GPU_PROFILING;BUILD_TRACY" OFF)

# separately, since they're cross-platform 
option(USE_DIRECTX_SHADER_COMPILER "Fetch DirectX Shader Compiler" ON)
option(USE_DIRECTX_TEX             "Fetch DirectX Tex Library"     ON)

option(USE_GLTF "Enable glTF/KTX support" ON)
cmake_dependent_option(BUILD_CGLTF         "  – cgltf (glTF parser)"                         ON  "USE_GLTF" OFF)
cmake_dependent_option(BUILD_LIBKTX        "  – libktx (KTX2/BasisU loader)"                 ON  "USE_GLTF" OFF)
cmake_dependent_option(BUILD_MESHOPTIMIZER "  – meshoptimizer runtime (EXT_meshopt decoder)" ON  "USE_GLTF" OFF)
cmake_dependent_option(BUILD_MIKK_T_SPACE  "  – MikkTSpace tangent generator"                ON  "USE_GLTF" OFF)

option(USE_GLTF_SAMPLE_MODELS "Enable importing glTF Sample Models" OFF)


# WIP - change build directory
# set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/build)
# set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_SYSTEM_NAME}/${PLATFORM}/${CMAKE_BUILD_TYPE}/bin)
# set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_SYSTEM_NAME}/${PLATFORM}/${CMAKE_BUILD_TYPE}/lib)
# set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_SYSTEM_NAME}/${PLATFORM}/${CMAKE_BUILD_TYPE}/lib)

# set(CMAKE_CURRENT_BINARY_DIR ${CMAKE_BINARY_DIR}/${CMAKE_SYSTEM_NAME}/${PLATFORM}/${CMAKE_BUILD_TYPE}/game_engine.dir)

include(FetchContent)
set(FETCHCONTENT_BASE_DIR ${CMAKE_SOURCE_DIR}/third_party)

# vcpkg
# -------------------------------------------------------------------------------------


if(USE_DIRECTX OR USE_DIRECTX_SHADER_COMPILER OR USE_DIRECTX_TEX)
    set(USE_VCPKG TRUE)
else()
    set(USE_VCPKG FALSE)
endif()

if(USE_VCPKG)

    # TODO: make vcpkg.json to be able to set stable version 
    message(STATUS "Fetching vcpkg-cmake-integration...")
    FetchContent_Declare(
        vcpkg_cmake_integration
        GIT_REPOSITORY https://github.com/bitmeal/vcpkg-cmake-integration.git
        GIT_TAG bd73d80e5ba118f0db3f046a2d71472c84594a91
    )
    FetchContent_MakeAvailable(vcpkg_cmake_integration)

    file(COPY ${vcpkg_cmake_integration_SOURCE_DIR}/vcpkg.cmake DESTINATION ${CMAKE_SOURCE_DIR}/cmake)

    set(VCPKG_PARENT_DIR "${CMAKE_SOURCE_DIR}/third_party")
    set(VCPKG_VERSION edge)
    include(cmake/vcpkg.cmake)
    
    # if(NOT VCPKG_NO_INIT)
    #     message("Call vcpkg_init() explicitly")
    #     vcpkg_init()
    # endif()

endif()
    
# -------------------------------------------------------------------------------------
       
project(game_engine)
     
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)  

# vcpkg - setting CMAKE_PREFIX_PATH 
# -------------------------------------------------------------------------------------

if(USE_VCPKG)
    function(vcpkg_make_set_triplet)
            # get platform: win/linux ONLY
            if(WIN32)
                set(PLATFORM "windows")
            else()
                set(PLATFORM "linux")
            endif()

            # get bitness: 32/64 ONLY
            if(CMAKE_SIZEOF_VOID_P EQUAL 8)
                set(BITS 64)
            else()
                set(BITS 86)
            endif()

            set(VCPKG_TARGET_TRIPLET "x${BITS}-${PLATFORM}" PARENT_SCOPE)
    endfunction()

    # Call this script right after the project() line to ensure the correct target triplet is determined
    vcpkg_make_set_triplet()
    set(VCPKG_ROOT "${FETCHCONTENT_BASE_DIR}/vcpkg")
    set(CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH};${VCPKG_ROOT}/installed/${VCPKG_TARGET_TRIPLET}/share")
endif()


# -------------------------------------------------------------------------------------

if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(PLATFORM "x64")
else()
    set(PLATFORM "x86")
endif()

if(CMAKE_GENERATOR MATCHES "Visual Studio")
    set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT ${PROJECT_NAME})
endif()


if(BUILD_SDL)
    message(STATUS "Fetching SDL...")
    FetchContent_Declare(
        sdl
        GIT_REPOSITORY https://github.com/libsdl-org/SDL.git
        GIT_TAG release-2.28.5
    )
endif()

if(BUILD_GLFW)
    message(STATUS "Fetching GLFW...")
    FetchContent_Declare(
        glfw
        GIT_REPOSITORY https://github.com/glfw/glfw.git
        GIT_TAG 3.3.4
    )
    set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
    set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
    set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
endif()


if(BUILD_SPDLOG)
    message(STATUS "Fetching SPDLOG...")
    FetchContent_Declare(
        spdlog
        GIT_REPOSITORY https://github.com/gabime/spdlog.git
        GIT_TAG v1.15.3
        GIT_SHALLOW    TRUE
        GIT_PROGRESS   TRUE
    )
endif()

if(BUILD_BULLET)
    message(STATUS "Fetching BULLET-3...")
    FetchContent_Declare(
        bullet
        GIT_REPOSITORY https://github.com/bulletphysics/bullet3.git
        GIT_TAG 3.09
    )
endif()

if(BUILD_IMGUI)
    message(STATUS "Fetching IMGUI...")
    FetchContent_Declare(
        imgui
        GIT_REPOSITORY https://github.com/ocornut/imgui.git
        # GIT_TAG v1.91.6
        GIT_TAG v1.91.6-docking
    )
endif()

if(BUILD_IMGUIZMO)
    message(STATUS "Fetching ImGuizmo...")
    FetchContent_Declare(
        imguizmo
        GIT_REPOSITORY https://github.com/CedricGuillemet/ImGuizmo.git
        # GIT_TAG 664cf2d73864a36b2a8b5091d33fc4578c885eca
        GIT_TAG b10e91756d32395f5c1fefd417899b657ed7cb88
    )
endif()

if(BUILD_IMGUIFILEDIALOG)
    message(STATUS "Fetching ImGuiFileDialog...")
    FetchContent_Declare(
        imguifiledialog
        GIT_REPOSITORY https://github.com/aiekick/ImGuiFileDialog.git
        GIT_TAG v0.6.7   
    )
endif()

if(BUILD_ASSIMP)
    message(STATUS "Fetching ASSIMP...")
    set(ASSIMP_BUILD_ZLIB ON CACHE BOOL "" FORCE)
    set(ASSIMP_BUILD_TESTS OFF CACHE BOOL "" FORCE)
    set(BUILD_SHARED_LIBS ON CACHE BOOL "" FORCE) # Generation of shared libs (dll for windows, so for Linux). Set this to OFF to get a static lib.
    FetchContent_Declare(
        assimp
        GIT_REPOSITORY https://github.com/assimp/assimp.git
        GIT_TAG v5.4.3
        # GIT_TAG v5.3.1
        GIT_SHALLOW ON
        GIT_PROGRESS ON
        #FIND_PACKAGE_ARGS 5.3.1
    )
endif()

if(BUILD_STB)
    message(STATUS "Fetching STB...")
    FetchContent_Declare(
        stb
        GIT_REPOSITORY https://github.com/nothings/stb.git
        GIT_TAG f0569113c93ad095470c54bf34a17b36646bbbb5
    )
endif()

if(BUILD_BOOST)
    message(STATUS "Fetching BOOST...")
    FetchContent_Declare(
        boost
        GIT_REPOSITORY https://github.com/boostorg/boost.git
        GIT_TAG boost-1.77.0
    )
    FetchContent_GetProperties(boost)
    if(NOT boost_POPULATED)
        FetchContent_Populate(boost)
        target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${boost_SOURCE_DIR})
    endif()
endif()

if(BUILD_EIGEN)
    message(STATUS "Fetching Eigen...")
    FetchContent_Declare(
        eigen
        GIT_REPOSITORY https://gitlab.com/libeigen/eigen.git
        GIT_TAG 3.4.0
    )
    FetchContent_GetProperties(eigen)
    if(NOT eigen_POPULATED)
        FetchContent_Populate(eigen)
        include_directories(${eigen_SOURCE_DIR})
    endif()
endif()

if(BUILD_MATH_LIBRARY)
    message(STATUS "Fetching Math Library...")
    FetchContent_Declare(
        math_library
        GIT_REPOSITORY https://github.com/vadymchan/math_library.git
        GIT_TAG main
        # GIT_TAG v.0.0.2-beta
    )
endif()

if(BUILD_EASTL)
    message(STATUS "Fetching EASTL...")
    # EASLT depends on EABase
    # FetchContent_Declare(
    #     eabase
    #     GIT_REPOSITORY https://github.com/electronicarts/EABase.git
    #     GIT_TAG 2.09.06
    #     GIT_PROGRESS TRUE
    #     GIT_SUBMODULES ""
    # )
    FetchContent_Declare(
        eastl
        GIT_REPOSITORY https://github.com/electronicarts/EASTL.git
        # GIT_TAG master
        GIT_TAG 3.21.23
        GIT_PROGRESS TRUE
        GIT_SUBMODULES ""
    )
endif()

if(BUILD_XXHASH)
    message(STATUS "Fetching xxHash...")
    FetchContent_Declare(
        xxhash
        GIT_REPOSITORY https://github.com/Cyan4973/xxHash.git
        GIT_TAG        v0.8.0
    )
endif()

if(BUILD_RAPIDJSON)
    message(STATUS "Fetching RapidJSON...")
    FetchContent_Declare(
        rapidjson
        GIT_REPOSITORY https://github.com/Tencent/rapidjson.git
        GIT_TAG v1.1.0
    )
endif()

if(BUILD_WATCHER)
    message(STATUS "Fetching watcher headers...")
    FetchContent_Declare(
        watcher
        GIT_REPOSITORY https://github.com/e-dant/watcher.git
        GIT_TAG 0d6b9b409ccaed6313437ea3dc8b2fc078f3d25b
    )
endif()

if(BUILD_ENTT)
    message(STATUS "Fetching EnTT...")
    FetchContent_Declare(
        entt
        GIT_REPOSITORY https://github.com/skypjack/entt.git
        GIT_TAG v3.14.0
    )
endif()

if(BUILD_TRACY)
    message(STATUS "Fetching Tracy...")
    FetchContent_Declare(
        tracy
        GIT_REPOSITORY https://github.com/wolfpld/tracy.git
        GIT_TAG v0.11.1
        GIT_SHALLOW TRUE
    )
endif()

if(BUILD_D3D12_MEMORY_ALLOCATOR)
    message(STATUS "Fetching D3D12MemoryAllocator...")
    FetchContent_Declare(
        D3D12MemoryAllocator
        GIT_REPOSITORY https://github.com/GPUOpen-LibrariesAndSDKs/D3D12MemoryAllocator.git
        GIT_TAG v2.0.1
    )
endif()

if(BUILD_VULKAN_MEMORY_ALLOCATOR)
    message(STATUS "Fetching VulkanMemoryAllocator...")
    FetchContent_Declare(
        VulkanMemoryAllocator
        GIT_REPOSITORY https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator.git
        GIT_TAG v3.1.0
    )
endif()

if(BUILD_CGLTF)
    message(STATUS "Fetching cgltf...")
    FetchContent_Declare(
        cgltf
        GIT_REPOSITORY https://github.com/jkuhlmann/cgltf.git
        GIT_TAG        v1.15
    )
endif()

if(BUILD_LIBKTX)
    message(STATUS "Fetching libktx...")
    FetchContent_Declare(
        libktx
        GIT_REPOSITORY https://github.com/KhronosGroup/KTX-Software.git
        GIT_TAG        v4.4.0
    )
    set(KTX_FEATURE_TOOLS     OFF CACHE BOOL "" FORCE)
    set(KTX_FEATURE_LIBRARIES ON  CACHE BOOL "" FORCE)
    set(KTX_FEATURE_TESTS     OFF CACHE BOOL "" FORCE)
    set(KTX_FEATURE_DOC       OFF CACHE BOOL "" FORCE)
    set(KTX_FEATURE_PY        OFF CACHE BOOL "" FORCE)
    set(KTX_FEATURE_JNI       OFF CACHE BOOL "" FORCE)
    set(KTX_FEATURE_GL_UPLOAD OFF CACHE BOOL "" FORCE)
    set(KTX_FEATURE_VK_UPLOAD ON  CACHE BOOL "" FORCE)
    set(BUILD_SHARED_LIBS     OFF CACHE BOOL "" FORCE)
endif()

if(BUILD_MESHOPTIMIZER)
    message(STATUS "Fetching meshoptimizer (runtime)...")
    FetchContent_Declare(
        meshoptimizer
        GIT_REPOSITORY https://github.com/zeux/meshoptimizer.git
        GIT_TAG        v0.23
    )
    set(MESHOPT_BUILD_GLTFPACK    OFF CACHE BOOL "" FORCE)
    set(MESHOPT_BUILD_DEMO        OFF CACHE BOOL "" FORCE)
    set(MESHOPT_INSTALL           OFF CACHE BOOL "" FORCE)
    set(MESHOPT_BUILD_SHARED_LIBS OFF CACHE BOOL "" FORCE)
endif()

if(BUILD_MIKK_T_SPACE)
    message(STATUS "Fetching MikkTSpace...")
    FetchContent_Declare(
        mikktspace
        GIT_REPOSITORY https://github.com/mmikk/MikkTSpace.git
        GIT_TAG        3e895b49d05ea07e4c2133156cfa94369e19e409
    )
endif()

if(USE_GLTF_SAMPLE_MODELS)
    message(STATUS "Fetching glTF-Sample-Models...")
    FetchContent_Declare(
        gltf_sample_models
        GIT_REPOSITORY https://github.com/KhronosGroup/glTF-Sample-Models.git
        GIT_TAG        d7a3cc8e51d7c573771ae77a57f16b0662a905c6
        GIT_SHALLOW    TRUE
    )
endif()


# old hierarchy
# file(GLOB_RECURSE SOURCES "src/*.cpp")
# file(GLOB_RECURSE INTERNAL_HEADERS "src/*.h")
# file(GLOB_RECURSE INLINES "src/*.inl")
# file(GLOB_RECURSE HEADERS "include/*.h")

file(GLOB_RECURSE SOURCES "src/*.cpp")
file(GLOB_RECURSE HEADERS "src/*.h")
file(GLOB_RECURSE INLINES "src/*.inl")

file(GLOB_RECURSE HLSL_SHADERS "${CMAKE_SOURCE_DIR}/assets/shaders/*.hlsl")
file(GLOB_RECURSE HLSL_INCLUDES "${CMAKE_SOURCE_DIR}/assets/shaders/*.hlsli") 

list(APPEND HLSL_SHADERS ${HLSL_INCLUDES})

# old hierarchy
# source_group(TREE "${CMAKE_CURRENT_SOURCE_DIR}/include" PREFIX "include" FILES ${HEADERS})
# source_group(TREE "${CMAKE_CURRENT_SOURCE_DIR}/src" PREFIX "src" FILES ${INTERNAL_HEADERS} ${SOURCES} ${INLINES})

source_group(TREE "${CMAKE_CURRENT_SOURCE_DIR}/src" PREFIX "src" FILES ${HEADERS} ${SOURCES} ${INLINES})
source_group(TREE "${CMAKE_SOURCE_DIR}/assets/shaders" PREFIX "Shaders" FILES ${HLSL_SHADERS})

option(GAME_ENGINE_USE_WINDOWS_SUBSYSTEM "Build as a Windows GUI application (if platform is Windows)" OFF)

# TODO: currently Win32 is not used in this project for Windows
if(WIN32 AND GAME_ENGINE_USE_WINDOWS_SUBSYSTEM)
    add_executable(${PROJECT_NAME} WIN32 ${SOURCES} ${HEADERS} ${INLINES} ${HLSL_SHADERS})
    target_compile_definitions(${PROJECT_NAME} PUBLIC GAME_ENGINE_WINDOWS_SUBSYSTEM)
else()
    add_executable(${PROJECT_NAME} ${SOURCES} ${HEADERS} ${INLINES} ${HLSL_SHADERS})
endif()


if(CMAKE_GENERATOR MATCHES "Visual Studio")
    set_target_properties(${PROJECT_NAME} PROPERTIES VS_GLOBAL_EnableClangTidyCodeAnalysis true)
    set_target_properties(${PROJECT_NAME} PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY "${WORKING_DIRECTORY}")

    # Set shader model
    foreach(SHADER_FILE ${HLSL_SHADERS})
        set_source_files_properties(${SHADER_FILE} PROPERTIES
            VS_SHADER_MODEL ${HLSL_SHADER_MODEL}
        )
    endforeach()

    # Set shader types based on file extensions
    foreach(SHADER_FILE ${HLSL_SHADERS})
        if(SHADER_FILE MATCHES "\\.vs\\.hlsl$")
            set_source_files_properties(${SHADER_FILE} PROPERTIES
                VS_SHADER_TYPE Vertex
            )
        elseif(SHADER_FILE MATCHES "\\.ps\\.hlsl$")
            set_source_files_properties(${SHADER_FILE} PROPERTIES
                VS_SHADER_TYPE Pixel
            )
        elseif(SHADER_FILE MATCHES "\\.gs\\.hlsl$")
            set_source_files_properties(${SHADER_FILE} PROPERTIES 
                VS_SHADER_TYPE Geometry
            )
        endif()
    endforeach()
endif()

# old hierarchy
# target_include_directories(${PROJECT_NAME} PUBLIC  include)
# target_include_directories(${PROJECT_NAME} PRIVATE src/internal_include)

target_include_directories(${PROJECT_NAME} PUBLIC src)

string(TOUPPER "${PROJECT_NAME}" PROJECT_UPPER)

if((USE_VULKAN OR USE_DIRECTX) AND FORCE_RHI_API)
    set(AVAILABLE_RHI_APIS "")
    if(USE_VULKAN)
        list(APPEND AVAILABLE_RHI_APIS "Vulkan")
    endif()
    if(USE_DIRECTX)
        list(APPEND AVAILABLE_RHI_APIS "DirectX")
    endif()

    list(GET AVAILABLE_RHI_APIS 0 DEFAULT_RHI_API)
    
    set(FORCED_RHI_API "${DEFAULT_RHI_API}" CACHE STRING "Select which RHI API to force")
    set_property(CACHE FORCED_RHI_API PROPERTY STRINGS ${AVAILABLE_RHI_APIS})
    
    message(STATUS "Available RHI APIs for forcing: ${AVAILABLE_RHI_APIS}")
    message(STATUS "Forcing RHI API: ${FORCED_RHI_API}")

    if(NOT FORCED_RHI_API IN_LIST AVAILABLE_RHI_APIS)
        message(WARNING "Selected RHI API '${FORCED_RHI_API}' is not available. Using default: ${DEFAULT_RHI_API}")
        set(FORCED_RHI_API "${DEFAULT_RHI_API}" CACHE STRING "Select which RHI API to force" FORCE)
    endif()

    if(FORCED_RHI_API STREQUAL "Vulkan")
        target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_FORCE_VULKAN)
        message(STATUS "Added macro: ${PROJECT_UPPER}_FORCE_VULKAN")
    elseif(FORCED_RHI_API STREQUAL "DirectX") 
        target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_FORCE_DIRECTX)
        message(STATUS "Added macro: ${PROJECT_UPPER}_FORCE_DIRECTX")
    endif()
endif()

if(BUILD_SDL)
    FetchContent_MakeAvailable(sdl)
    
    set(SDL_BUILD_INCLUDE_DIR ${sdl_BINARY_DIR}/include)

    if(EXISTS "${SDL_BUILD_INCLUDE_DIR}/SDL3")
        set(SDL_VERSION_DIR "SDL3")
    elseif(EXISTS "${SDL_BUILD_INCLUDE_DIR}/SDL2")
        set(SDL_VERSION_DIR "SDL2")
    else()
        message(FATAL_ERROR "Wrong directory in ${SDL_BUILD_INCLUDE_DIR}")
    endif()

    target_link_libraries(${PROJECT_NAME} PRIVATE SDL2::SDL2)
    add_dependencies(${PROJECT_NAME} SDL2::SDL2)

    # SDL's include directories are in the build directory (not the source directory   
    # like other third parties in this project), due to SDL generating includes during build.
    # target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE
    #     ${sdl_SOURCE_DIR}/include
    #     $<BUILD_INTERFACE:${sdl_BINARY_DIR}/include>
    #     $<BUILD_INTERFACE:${sdl_BINARY_DIR}/include-config-$<CONFIG>/${SDL_VERSION_DIR}>)
    
    target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE
        ${sdl_SOURCE_DIR}/include
        ${SDL_BUILD_INCLUDE_DIR}
        ${SDL_BUILD_INCLUDE_DIR}/${SDL_VERSION_DIR}
        $<$<CONFIG:Debug>:${sdl_BINARY_DIR}/include-config-debug/${SDL_VERSION_DIR}>
        $<$<CONFIG:Release>:${sdl_BINARY_DIR}/include-config-release/${SDL_VERSION_DIR}>
    )

    # target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${SDL_BUILD_INCLUDE_DIR})
    # target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${SDL_BUILD_INCLUDE_DIR}/${SDL_VERSION_DIR})
    # target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE
    #     $<$<CONFIG:Debug>:${sdl_BINARY_DIR}/include-config-debug/${SDL_VERSION_DIR}>
    #     $<$<CONFIG:Release>:${sdl_BINARY_DIR}/include-config-release/${SDL_VERSION_DIR}>
    # )
    # target_link_libraries(${PROJECT_NAME} PRIVATE SDL2)

    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_SDL)
endif()

if(BUILD_GLFW)
    FetchContent_MakeAvailable(glfw)
    target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${glfw_SOURCE_DIR}/include)
    target_link_libraries(${PROJECT_NAME} PRIVATE glfw)
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_GLTF)
endif()

if(BUILD_SPDLOG)
    FetchContent_MakeAvailable(spdlog)
    target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${spdlog_SOURCE_DIR}/include)
    target_link_libraries(${PROJECT_NAME} PRIVATE spdlog)
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_SPDLOG)
endif()

if(BUILD_BULLET)
    FetchContent_MakeAvailable(bullet)
    target_link_libraries(${PROJECT_NAME} PRIVATE BulletDynamics BulletCollision LinearMath)
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_BULLET)
endif()

if(BUILD_IMGUI)
    FetchContent_MakeAvailable(imgui)
    
    # add src files
    set(IMGUI_SOURCES
        ${imgui_SOURCE_DIR}/imgui.cpp
        ${imgui_SOURCE_DIR}/imgui_draw.cpp
        ${imgui_SOURCE_DIR}/imgui_widgets.cpp
        ${imgui_SOURCE_DIR}/imgui_tables.cpp
        ${imgui_SOURCE_DIR}/backends/imgui_impl_opengl3.cpp # temp, remove
    )

    if(USE_VULKAN)
        list(APPEND IMGUI_SOURCES ${imgui_SOURCE_DIR}/backends/imgui_impl_vulkan.cpp)
    endif()

    if(USE_DIRECTX)
        list(APPEND IMGUI_SOURCES ${imgui_SOURCE_DIR}/backends/imgui_impl_dx12.cpp)
    endif()

    if(BUILD_SDL)
        list(APPEND IMGUI_SOURCES ${imgui_SOURCE_DIR}/backends/imgui_impl_sdl2.cpp)
        # list(APPEND IMGUI_SOURCES ${imgui_SOURCE_DIR}/backends/imgui_impl_sdl3.cpp)
    endif()

    add_library(imgui_library STATIC ${IMGUI_SOURCES})
    
    # add dependencies
    if(USE_VULKAN)
        find_package(Vulkan REQUIRED)
        target_include_directories(imgui_library PRIVATE ${Vulkan_INCLUDE_DIRS})
        target_link_libraries(imgui_library PRIVATE Vulkan::Vulkan)
    endif()

    if(USE_DIRECTX)
        target_include_directories(imgui_library PRIVATE ${WINDOWS_SDK_INCLUDE_DIR})
        target_link_libraries(imgui_library PRIVATE d3d12 dxgi)
    endif()

    # if(BUILD_SDL)
    #     target_include_directories(imgui_library PRIVATE ${SDL_INCLUDE_DIRS})
    #     target_link_libraries(imgui_library PRIVATE SDL2::SDL2)
    # endif()

    if(BUILD_SDL)
        FetchContent_MakeAvailable(sdl)
        target_link_libraries(imgui_library PRIVATE SDL2::SDL2)
        target_include_directories(imgui_library SYSTEM PRIVATE
            ${sdl_SOURCE_DIR}/include
            ${sdl_BINARY_DIR}/include
            ${sdl_BINARY_DIR}/include/${SDL_VERSION_DIR}
            $<$<CONFIG:Debug>:${sdl_BINARY_DIR}/include-config-debug/${SDL_VERSION_DIR}>
            $<$<CONFIG:Release>:${sdl_BINARY_DIR}/include-config-release/${SDL_VERSION_DIR}>
        )
    endif()

    target_include_directories(imgui_library PRIVATE
        ${imgui_SOURCE_DIR}
        ${imgui_SOURCE_DIR}/backends
    )

    target_link_libraries(${PROJECT_NAME} PRIVATE imgui_library)

    target_include_directories(${PROJECT_NAME}
        SYSTEM PRIVATE
            ${imgui_SOURCE_DIR}
            ${imgui_SOURCE_DIR}/backends
    )

    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_IMGUI)

endif()

if(BUILD_IMGUIZMO)
    FetchContent_MakeAvailable(imguizmo)

    add_library(imguizmo_library STATIC
        ${imguizmo_SOURCE_DIR}/ImGuizmo.cpp
    )

    target_link_libraries(imguizmo_library PRIVATE imgui_library)

    target_include_directories(imguizmo_library PRIVATE
        ${imguizmo_SOURCE_DIR}
        ${imgui_SOURCE_DIR}
        ${imgui_SOURCE_DIR}/backends
    )

    target_link_libraries(${PROJECT_NAME} PRIVATE imguizmo_library)

    target_include_directories(${PROJECT_NAME}
        SYSTEM PRIVATE
        ${imguizmo_SOURCE_DIR}
    )

    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_IMGUIZMO)
endif()

if(BUILD_IMGUIFILEDIALOG)
    FetchContent_MakeAvailable(imguifiledialog)

    add_library(imguifiledialog_library STATIC
        ${imguifiledialog_SOURCE_DIR}/ImGuiFileDialog.cpp
    )

    target_link_libraries(imguifiledialog_library PRIVATE imgui_library)

    target_include_directories(imguifiledialog_library PRIVATE
        ${imguifiledialog_SOURCE_DIR}
        ${imgui_SOURCE_DIR}
        ${imgui_SOURCE_DIR}/backends
    )

    target_link_libraries(${PROJECT_NAME} PRIVATE imguifiledialog_library)
    
    target_include_directories(${PROJECT_NAME} 
        SYSTEM PRIVATE
        ${imguifiledialog_SOURCE_DIR}
    )

    target_compile_definitions(${PROJECT_NAME}
        PRIVATE ${PROJECT_UPPER}_USE_IMGUIFILEDIALOG
    )
endif()

if(BUILD_ASSIMP)
    FetchContent_MakeAvailable(assimp)
    target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC
        ${assimp_INCLUDE_DIRS}
        ${assimp_SOURCE_DIR}/code/../include
        ${assimp_BINARY_DIR}/code/../include
    )
    target_link_libraries(${PROJECT_NAME} PRIVATE assimp)

    add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
        $<TARGET_FILE:assimp>
        $<TARGET_FILE_DIR:${PROJECT_NAME}>)

    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_ASSIMP)
endif()

if(BUILD_STB)
    FetchContent_MakeAvailable(stb)
    target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${stb_SOURCE_DIR})
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_STB)
endif()

if(BUILD_EIGEN)
    FetchContent_MakeAvailable(eigen)
    target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${eigen_SOURCE_DIR})
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_EIGEN)
endif()

if(BUILD_MATH_LIBRARY)
    # TODO: remove MATH_LIBRARY_USE_NORMALIZE_IN_PLACE (not used)
    set(MATH_LIBRARY_USE_NORMALIZE_IN_PLACE OFF CACHE BOOL "Use in-place normalization" FORCE)
    FetchContent_MakeAvailable(math_library)
    # if error with simd_define not generated occurs, uncomment this code
    # add_dependencies(${PROJECT_NAME} math_library)
    target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${math_library_SOURCE_DIR}/include)
    target_link_libraries(${PROJECT_NAME} PRIVATE math_library)
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_MATH_LIBRARY)
endif()

if(BUILD_EASTL)
    # FetchContent_MakeAvailable(eabase)
    set(SAVED_BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS})
    set(BUILD_SHARED_LIBS OFF)
    FetchContent_MakeAvailable(eastl)
    target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${eastl_SOURCE_DIR}/include)
    target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${EABase_SOURCE_DIR}/include/Common)
    target_link_libraries(${PROJECT_NAME} PRIVATE EASTL)
    set(BUILD_SHARED_LIBS ${SAVED_BUILD_SHARED_LIBS})
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_EASTL)
endif()

if(BUILD_XXHASH)
    FetchContent_MakeAvailable(xxhash)
    # Optional - save previous state of BUILD_SHARED_LIBS
    # Some additional steps for xxHash as it is unofficial
    # xxHash messes with BUILD_SHARED_LIBS if it is empty
    # set(SAVED_BUILD_SHARED_LIBS "${BUILD_SHARED_LIBS}")
    add_subdirectory(
        "${xxhash_SOURCE_DIR}/cmake_unofficial"
        "${xxhash_BINARY_DIR}"
        EXCLUDE_FROM_ALL
    )
    # Optional - save previous state of BUILD_SHARED_LIBS (continue)
    # Restore BUILD_SHARED_LIBS
    # set(BUILD_SHARED_LIBS "${SAVED_BUILD_SHARED_LIBS}" CACHE BOOL "" FORCE)
    target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE "${xxhash_SOURCE_DIR}/cmake_unofficial/..")
    target_link_libraries(${PROJECT_NAME} PRIVATE xxhash)
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_XXHASH)
endif()

if(BUILD_RAPIDJSON)
    set(RAPIDJSON_BUILD_EXAMPLES OFF CACHE INTERNAL "")
    set(RAPIDJSON_BUILD_TESTS OFF CACHE INTERNAL "")
    FetchContent_MakeAvailable(rapidjson)
    target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${RapidJSON_SOURCE_DIR}/include)
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_RAPIDJSON)
endif()

if(BUILD_WATCHER)
    FetchContent_Populate(watcher)
    add_library(wtr.hdr_watcher INTERFACE)
    target_include_directories(wtr.hdr_watcher INTERFACE ${watcher_SOURCE_DIR}/include)
    target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${watcher_SOURCE_DIR}/include)
    target_link_libraries(${PROJECT_NAME} PRIVATE wtr.hdr_watcher)
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_WATCHER)
endif()

if(BUILD_ENTT)
    FetchContent_MakeAvailable(entt)
    target_link_libraries(${PROJECT_NAME} PRIVATE EnTT)
    target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${entt_SOURCE_DIR}/src)
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_ENTT)
endif()

if(BUILD_D3D12_MEMORY_ALLOCATOR)
    FetchContent_MakeAvailable(D3D12MemoryAllocator)
    target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${D3D12MemoryAllocator_SOURCE_DIR}/include)
    target_link_libraries(${PROJECT_NAME} PRIVATE D3D12MemoryAllocator)
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_SD3D12_MEMORY_ALLOCATOR)
endif()

if(BUILD_VULKAN_MEMORY_ALLOCATOR)
    FetchContent_MakeAvailable(VulkanMemoryAllocator)
    target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${vulkanmemoryallocator_SOURCE_DIR}/include)
    target_link_libraries(${PROJECT_NAME} PRIVATE VulkanMemoryAllocator)
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_VULKAN_MEMORY_ALLOCATOR)
endif()

if(BUILD_CGLTF)
    FetchContent_MakeAvailable(cgltf)
    add_library(cgltf_lib INTERFACE)
    target_include_directories(cgltf_lib INTERFACE ${cgltf_SOURCE_DIR})
    target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${cgltf_SOURCE_DIR})
    target_link_libraries(${PROJECT_NAME} PRIVATE cgltf_lib)
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_CGLTF)
endif()

if(BUILD_LIBKTX)
    FetchContent_MakeAvailable(libktx)
    target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${libktx_SOURCE_DIR}/include)
    target_link_libraries(${PROJECT_NAME} PRIVATE ktx)
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_LIBKTX)
endif()

if(BUILD_MESHOPTIMIZER)
    FetchContent_MakeAvailable(meshoptimizer)
    target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${meshoptimizer_SOURCE_DIR}/src)
    target_link_libraries(${PROJECT_NAME} PRIVATE meshoptimizer)
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_MESHOPTIMIZER)
endif()

if(BUILD_MIKK_T_SPACE)
    FetchContent_MakeAvailable(mikktspace)
    add_library(mikktspace_lib STATIC ${mikktspace_SOURCE_DIR}/mikktspace.c)
    target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ${mikktspace_SOURCE_DIR})
    target_link_libraries(${PROJECT_NAME} PRIVATE mikktspace_lib)
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_MIKKTS)
endif()

if(USE_GLTF_SAMPLE_MODELS)
    FetchContent_MakeAvailable(gltf_sample_models)

    file(COPY
        ${gltf_sample_models_SOURCE_DIR}/2.0
        DESTINATION ${CMAKE_SOURCE_DIR}/assets/models/gltf
    )
endif()


if(BUILD_TRACY)
    FetchContent_MakeAvailable(tracy)
    target_compile_definitions(${PROJECT_NAME} PRIVATE 
        # TRACY_ON_DEMAND
        $<$<CONFIG:Debug,RelWithDebInfo>:TRACY_ENABLE>
        # TRACY_CALLSTACK 
        # TRACY_ONLY_LOCALHOST  
    )
    target_link_libraries(${PROJECT_NAME} PRIVATE TracyClient)
    target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${tracy_SOURCE_DIR}/public)
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_TRACY)
endif()

if(USE_PROFILING)
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_PROFILING)
endif()

if(USE_CPU_PROFILING)
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_CPU_PROFILING)
endif()

if(USE_GPU_PROFILING)
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_GPU_PROFILING)
endif()

if(USE_TRACY_GPU_PROFILING)
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_TRACY_GPU_PROFILING)
endif()

if(USE_VULKAN)
    # Find Vulkan package
    find_package(Vulkan REQUIRED)
    target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${Vulkan_INCLUDE_DIRS})
    # Find shaderc library
    find_library(Shaderc_LIBRARIES
        NAMES shaderc_shared
        HINTS "$ENV{VULKAN_SDK}/lib"
    )
    if(NOT Shaderc_LIBRARIES)
        message(WARNING "Could not find shaderc_shared library. Fallback to shaderc_combined.")
        find_library(Shaderc_LIBRARIES
            NAMES shaderc_combined
            HINTS "$ENV{VULKAN_SDK}/lib"
        )
    endif()

    target_link_libraries(${PROJECT_NAME} PRIVATE ${Shaderc_LIBRARIES})
    target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE "$ENV{VULKAN_SDK}/include")

    target_compile_definitions(${PROJECT_NAME} PRIVATE VULKAN)
    target_link_libraries(${PROJECT_NAME} PRIVATE ${Vulkan_LIBRARIES})

    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_VULKAN)
endif()

if(USE_OPENGL)
    find_package(OpenGL QUIET COMPONENTS OpenGL EGL)
    if(NOT OpenGL_FOUND)
        set(OpenGL_GL_PREFERENCE LEGACY)
        find_package(OpenGL REQUIRED)
    endif()
    target_compile_definitions(${PROJECT_NAME} PRIVATE OPENGL)
    target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${OPENGL_INCLUDE_DIR})
    target_link_libraries(${PROJECT_NAME} PRIVATE ${OPENGL_gl_LIBRARY})

    option(BUILD_GLEW "Build the GLEW library" ON)
    if(BUILD_GLEW)
        message(STATUS "Fetching GLEW...")
        FetchContent_Declare(
            glew
            GIT_REPOSITORY https://github.com/Perlmint/glew-cmake.git
            GIT_TAG master
            CMAKE_ARGS -Dglew-cmake_BUILD_STATIC=ON
        )
        FetchContent_GetProperties(glew)
        if(NOT glew_POPULATED)
            FetchContent_Populate(glew)
            add_subdirectory(${glew_SOURCE_DIR} ${glew_BINARY_DIR})
        endif()
        target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE ${glew_SOURCE_DIR}/include)
        target_link_libraries(${PROJECT_NAME} PRIVATE libglew_static)
    endif()
endif()


# BEGIN: DirectX 12 Agility SDK
#--------------------------------------------------------------------------------------
if(USE_DIRECTX_AGILITY)

    # BEGIN: cmake_modules (FindWindowsSDK) -> D3D12_LIB
    # ---------------------------------------------------------------------------
    message(STATUS "Fetching cmake_modules (for fetching )...")
    FetchContent_Declare(
      cmake_modules
      GIT_REPOSITORY https://github.com/rpavlik/cmake-modules
      GIT_TAG main
    )
    FetchContent_MakeAvailable(cmake_modules)
    file(COPY ${cmake_modules_SOURCE_DIR}/FindWindowsSDK.cmake DESTINATION ${CMAKE_SOURCE_DIR}/cmake)
    list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")

    include(FindWindowsSDK)

    find_package(WindowsSDK REQUIRED)

    list(GET WINDOWSSDK_DIRS 0 LATEST_SDK_DIR)

    get_windowssdk_library_dirs(${LATEST_SDK_DIR} latest_sdk_lib_dirs)
    find_library(D3D12_LIB NAMES d3d12 PATHS ${latest_sdk_lib_dirs} NO_DEFAULT_PATH)
    # END: cmake_modules (FindWindowsSDK) -> D3D12_LIB
    # ---------------------------------------------------------------------------

    message(STATUS "Fetching directx12-agility...")

    find_package(directx-headers QUIET)
    find_package(directx12-agility QUIET)
    if(NOT directx12-agility_FOUND AND NOT directx-headers_FOUND)
        vcpkg_add_package(directx12-agility)
        find_package(directx-headers CONFIG REQUIRED)
        find_package(directx12-agility CONFIG REQUIRED)
    endif()

    target_link_libraries(${PROJECT_NAME} PRIVATE Microsoft::DirectX-Headers Microsoft::DirectX-Guids Microsoft::DirectX12-Agility)

    if(TARGET Microsoft::DirectX12-Agility)
        add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E make_directory $<TARGET_FILE_DIR:${PROJECT_NAME}>/D3D12
            COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_PROPERTY:Microsoft::DirectX12-Core,IMPORTED_LOCATION_RELEASE> $<TARGET_FILE_DIR:${PROJECT_NAME}>/D3D12
            COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_PROPERTY:Microsoft::DirectX12-Layers,IMPORTED_LOCATION_DEBUG> $<TARGET_FILE_DIR:${PROJECT_NAME}>/D3D12
            COMMAND_EXPAND_LISTS
        )
    endif()

    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_DIRECTX_AGILITY)
endif()
# END: DirectX 12 Agility SDK
# -------------------------------------------------------------------------------------

# BEGIN: DirectXShaderCompiler
# -------------------------------------------------------------------------------------
# TODO: this is currently used not only for DirectX 12 but for Vulkan as well
if(USE_DIRECTX_SHADER_COMPILER)
    message(STATUS "Fetching directx-dxc...")

    find_package(directx-dxc QUIET)
    if(NOT directx-dxc_FOUND)
        vcpkg_add_package(directx-dxc)
        find_package(directx-dxc CONFIG REQUIRED)
    endif()

    target_link_libraries(${PROJECT_NAME} PRIVATE Microsoft::DXIL Microsoft::DirectXShaderCompiler)

    if(TARGET Microsoft::DirectXShaderCompiler)
        get_target_property(DXC_IMPORTED_LOCATION Microsoft::DirectXShaderCompiler IMPORTED_LOCATION)
        get_target_property(DXIL_IMPORTED_LOCATION Microsoft::DXIL IMPORTED_LOCATION)
        
        add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E copy_if_different ${DXC_IMPORTED_LOCATION} $<TARGET_FILE_DIR:${PROJECT_NAME}>
            COMMAND ${CMAKE_COMMAND} -E copy_if_different ${DXIL_IMPORTED_LOCATION} $<TARGET_FILE_DIR:${PROJECT_NAME}>
        )
    endif()
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_DIRECTX_SHADER_COMPILER)
endif()
# END: DirectXShaderCompiler
# -------------------------------------------------------------------------------------

# BEGIN: DirectXTex
# -------------------------------------------------------------------------------------
if(USE_DIRECTX_TEX)
    message(STATUS "Fetching DirectXTex...")
    
    find_package(directxtex QUIET)
    if(NOT directxtex_FOUND)
        vcpkg_add_package(directxtex)
        find_package(directxtex CONFIG REQUIRED)
    endif()
    
    target_link_libraries(${PROJECT_NAME} PRIVATE  Microsoft::DirectXTex)
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_DIRECTX_TEX)
endif()
# END: DirectXTex
# -------------------------------------------------------------------------------------

# BEGIN: DirectX Tool Kit (DirectXTK12)
# -------------------------------------------------------------------------------------
if(USE_DIRECTX_TOOL_KIT)
    message(STATUS "Fetching DirectX Tool Kit...")

    find_package(directxtk12 QUIET)
    if(NOT directxtk12_FOUND)
        vcpkg_add_package(directxtk12)
        find_package(directxtk12 CONFIG REQUIRED)
    endif()
    target_link_libraries(${PROJECT_NAME} PRIVATE Microsoft::DirectXTK12)
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_DIRECTX_TOOL_KIT)
endif()
# END: DirectX Tool Kit
# -------------------------------------------------------------------------------------

# BEGIN: WinPix Event Runtime (PIX3)
# -------------------------------------------------------------------------------------
if(BUILD_WINPIX_EVENT)
    message(STATUS "Fetching WinPix Event Runtime (PIX3)...")

    find_package(winpixevent QUIET)
    if(NOT winpixevent_FOUND)
        vcpkg_add_package(winpixevent)
        find_package(winpixevent CONFIG REQUIRED)
    endif()

    target_link_libraries(${PROJECT_NAME} PRIVATE Microsoft::WinPixEventRuntime)

    target_compile_definitions(${PROJECT_NAME} PRIVATE USE_PIX ${PROJECT_UPPER}_USE_WINPIX_EVENT) 
endif()
# END: WinPix Event Runtime
# -------------------------------------------------------------------------------------

if(NOT USE_VULKAN AND NOT USE_OPENG AND NOT USE_DIRECTX)
    message(FATAL_ERROR "At least one of Vulkan, OpenGL or DirectX must be selected for graphics API")
endif()

if(USE_DIRECTX AND NOT WIN32)
    message(FATAL_ERROR "DirectX is only available on Windows!")
endif()

if(USE_DIRECTX AND WIN32)
    target_link_libraries(${PROJECT_NAME} PRIVATE d3d12 dxgi)
    target_compile_definitions(${PROJECT_NAME} PRIVATE ${PROJECT_UPPER}_USE_DX12)
endif()

add_custom_command(TARGET ${PROJECT_NAME}
                   POST_BUILD
                   COMMAND ${CMAKE_COMMAND} -E remove 
                           "${CMAKE_SOURCE_DIR}/test_fs_support_case_sensitivity"
                           "${CMAKE_SOURCE_DIR}/test_fs_support_CASE_sensitivity"
                   COMMENT "Removing case sensitivity test files from " ${CMAKE_SOURCE_DIR}
)

if(BUILD_ASSET_TOOLS)
    add_subdirectory(tools EXCLUDE_FROM_ALL)
endif()
